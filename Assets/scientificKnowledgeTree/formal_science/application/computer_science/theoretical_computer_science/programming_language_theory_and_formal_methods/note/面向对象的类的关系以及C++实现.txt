//------------------------------------------------------------------------------
在面向对象的程序设计中，类之间有6中关系，分别是继承， 组合，
聚合，关联， 依赖，实现，如果使用C语言实现，上面的这些关系通
过"结构体包含结构体、结构体包含结构体指针以及函数指针等语法实
现"，C语言本身的语法并不支持这些逻辑关系的实现，所以使用C语言
实现面向对象的程序设计很多时候需要我们自己来关注某一种语法实现
两个类之间到底是什么关系，但是C++/Java/Python等语言原生支持
面向对象的程序设计，即这些编程语言的语法本身就可以实现这些类之
间的逻辑关系，本文以C++为例，分析这些类关系的含义，下面是本
文最终得到的UML类图示例。


继承(Generalization)
//------------------------------------------------------------------------------
继承是面向对象的三大特征之一，是一种最能体现面向对象代码复用的类
关系，对于继承，可以使用"is a"来表示，比如，小轿车(类B)"is a"车(
类A)，是对车(类A)的进一步刻画，那么这两个类就是"继承"关系。

class Goose : public Bird{
    //子类扩展属性和方法
};

组合(Composition)
//------------------------------------------------------------------------------
组合是将一个对象（部分）放到另一个对象里（组合）。它是一种
"has-a" 的关系。相比"聚合"，组合是一种强所属关系，组合关系的
两个对象往往具有相同的生命周期，被组合的对象是在组合对象创建
的同时或者创建之后创建，在组合对象销毁之前销毁。一般来说被组
合对象不能脱离组合对象独立存在，而且也只能属于一个组合对象。
比如，鸟类和翅膀类就是组合关系，在创建一个鸟类对象时，一定要
同时或之后创建一个翅膀类对象，销毁一个鸟类对象时，一定要先同
时或之前销毁翅膀对象。在C++语法中，使用在一个类中包含另外
一个类类型的成员来实现组合。

class Wing{
};
class Bird{
    Wing wing;
};

聚合(Aggregation)
//------------------------------------------------------------------------------
聚合是一种弱所属关系，比如一只大雁和雁群，就是一种"聚合"关系
。和组合相比，被聚合的对象可以属于多个聚合对象，比如，一只大
雁可能属于多个雁群。在C++语法中，通过类的指针来实现聚合

class Goose{
};

class Geese{
    public:
        Goose member[10];
};

关联(Association)
//------------------------------------------------------------------------------
关联也是一种弱关系，但并不是从属关系，关联的连个的类可以看作
是平等的，比如一只大雁和老鹰的关系，就可以看作关联关系

C++中，通过定义其他类指针类型的成员来实现关联，下面是双向关
联的实现方法

class Egle{
    class Goose *food;
};
class Goose{
    class Egle *predator;
};

依赖(Dependency)
//------------------------------------------------------------------------------
一个对象的某种行为依赖于另一个类，比如，大雁的迁徙行为受季节
影响，那么，大雁和季节就会有"依赖"关系。C++语法中，通过将
一个类作为另一类方法的参数的形式实现两个类之间的依赖关系
class Season{
}; 
class Goose{
    public:
       void Migrate(Season season); //或Migrate(Season *season)、Migrate(Season &season)
};

实现(Realization)
//------------------------------------------------------------------------------
实现对应的是面向对象中的"接口"，即动物都要移动，但是每种移动
的方式不一样，鸟要实现自己独有的移动的方法。
在C++中，接口通过的纯虚函数来实现，C++的多态就是通过虚函
数来实现的。
class Animal{
    public:
        vitual void move();
};
class Bird: public Animal{
    void move(){
        //鸟的移动方式，飞
    }
};
